{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91808\\\\Desktop\\\\Weather-app\\\\src\\\\components\\\\Dashboard.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchData } from \"../actions/weatherStation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._updateCity = () => {\n      const city = this.__cityInput.value;\n      if (city.length !== 0) this.props.dispatch(fetchData(city));\n    };\n\n    this._onkeyPress = e => {\n      if (e.key === \"Enter\") {\n        this._updateCity(); // setInterval(this._updateCity(),1000);\n\n      }\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this._updateCity();\n    }, 300000);\n  }\n\n  //   window.setInterval(function ()\n  // {\n  //     MyMethod();\n  // }, 300000)\n  //  componentWillUnmount() {\n  //   clearInterval(this.interval);\n  // }\n  // setInterval(function(){_onkeypress();}, 5000);\n  render() {\n    const {\n      city,\n      status\n    } = this.props;\n    const wrapperClass = status === \"failed\" ? \"weather-dashboard invalid-city\" : \"weather-dashboard\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: wrapperClass,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"heading\",\n          children: \"5-Day Weather Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"controls\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"city-input\",\n            id: \"city-name\",\n            ref: input => {\n              this.__cityInput = input;\n              return this.__cityInput;\n            },\n            onKeyPress: this._onkeyPress,\n            placeholder: city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: \">\",\n            className: \"search\",\n            onClick: this._updateCity,\n            id: \"change-city-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: \"Please enter valid city name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default connect(store => {\n  return {\n    status: store.weatherStation.status\n  };\n})(Dashboard);","map":{"version":3,"sources":["C:/Users/91808/Desktop/Weather-app/src/components/Dashboard.js"],"names":["React","Component","connect","fetchData","Dashboard","_updateCity","city","__cityInput","value","length","props","dispatch","_onkeyPress","e","key","componentDidMount","setInterval","render","status","wrapperClass","input","store","weatherStation"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,2BAA1B;;;AAGA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAMhCI,WANgC,GAMlB,MAAM;AAClB,YAAMC,IAAI,GAAG,KAAKC,WAAL,CAAiBC,KAA9B;AACA,UAAGF,IAAI,CAACG,MAAL,KAAgB,CAAnB,EAAsB,KAAKC,KAAL,CAAWC,QAAX,CAAoBR,SAAS,CAACG,IAAD,CAA7B;AACvB,KAT+B;;AAAA,SAWhCM,WAXgC,GAWlBC,CAAC,IAAI;AAEjB,UAAGA,CAAC,CAACC,GAAF,KAAU,OAAb,EAAsB;AACpB,aAAKT,WAAL,GADoB,CAEpB;;AACD;AACF,KAjB+B;AAAA;;AAEhCU,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,WAAW,CAAC,MAAM;AAAC,WAAKX,WAAL;AAAoB,KAA5B,EAA8B,MAA9B,CAAX;AACD;;AAiBH;AACA;AACA;AACA;AAEE;AACA;AACA;AACA;AACAY,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEX,MAAAA,IAAF;AAAQY,MAAAA;AAAR,QAAmB,KAAKR,KAA9B;AACA,UAAMS,YAAY,GAAID,MAAM,KAAK,QAAZ,GAAwB,gCAAxB,GAA2D,mBAAhF;AAEA,wBACE;AAAK,MAAA,SAAS,EAAEC,YAAhB;AAAA,8BACE;AAAA,+BACE;AAAI,UAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAS,QAAA,SAAS,EAAC,UAAnB;AAAA,+BACE;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,SAAS,EAAC,YAFZ;AAGE,YAAA,EAAE,EAAC,WAHL;AAIE,YAAA,GAAG,EAAEC,KAAK,IAAI;AACZ,mBAAKb,WAAL,GAAmBa,KAAnB;AACA,qBAAO,KAAKb,WAAZ;AACD,aAPH;AAQE,YAAA,UAAU,EAAE,KAAKK,WARnB;AASE,YAAA,WAAW,EAAEN;AATf;AAAA;AAAA;AAAA;AAAA,kBADF,eAaE;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,KAAK,EAAC,GAFR;AAGE,YAAA,SAAS,EAAC,QAHZ;AAIE,YAAA,OAAO,EAAE,KAAKD,WAJhB;AAKE,YAAA,EAAE,EAAC;AALL;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF,eA2BE;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA+BD;;AAlE+B;;AAqElC,eAAeH,OAAO,CAAEmB,KAAD,IAAW;AAChC,SAAO;AACLH,IAAAA,MAAM,EAAEG,KAAK,CAACC,cAAN,CAAqBJ;AADxB,GAAP;AAGD,CAJqB,CAAP,CAIZd,SAJY,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchData } from \"../actions/weatherStation\";\r\n\r\n\r\nclass Dashboard extends Component {\r\n  \r\n  componentDidMount() {\r\n    setInterval(() => {this._updateCity();}, 300000);\r\n  }\r\n\r\n  _updateCity = () => {\r\n    const city = this.__cityInput.value;\r\n    if(city.length !== 0) this.props.dispatch(fetchData(city));\r\n  }\r\n  \r\n  _onkeyPress = e => {\r\n  \r\n    if(e.key === \"Enter\") {\r\n      this._updateCity();\r\n      // setInterval(this._updateCity(),1000);\r\n    }\r\n  }\r\n  \r\n \r\n\r\n//   window.setInterval(function ()\r\n// {\r\n//     MyMethod();\r\n// }, 300000)\r\n\r\n  //  componentWillUnmount() {\r\n  //   clearInterval(this.interval);\r\n  // }\r\n  // setInterval(function(){_onkeypress();}, 5000);\r\n  render() {\r\n\r\n    const { city, status } = this.props;\r\n    const wrapperClass = (status === \"failed\") ? \"weather-dashboard invalid-city\" : \"weather-dashboard\";\r\n\r\n    return (\r\n      <div className={wrapperClass}>\r\n        <header>\r\n          <h1 className=\"heading\">5-Day Weather Forecast</h1>\r\n        </header>\r\n        <section className=\"controls\">\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"city-input\"\r\n              id=\"city-name\"\r\n              ref={input => {\r\n                this.__cityInput = input;\r\n                return this.__cityInput;\r\n              }}\r\n              onKeyPress={this._onkeyPress}\r\n              placeholder={city}\r\n            />\r\n            \r\n            <input\r\n              type=\"button\"\r\n              value=\"&gt;\"\r\n              className=\"search\"\r\n              onClick={this._updateCity}\r\n              id=\"change-city-btn\"\r\n            />\r\n          </div>\r\n        </section>\r\n        <span className=\"error\">Please enter valid city name!</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((store) => {\r\n  return {\r\n    status: store.weatherStation.status\r\n  }\r\n})(Dashboard)"]},"metadata":{},"sourceType":"module"}