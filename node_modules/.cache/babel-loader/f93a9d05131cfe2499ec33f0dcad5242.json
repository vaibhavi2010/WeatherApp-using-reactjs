{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91808\\\\Desktop\\\\Weather-app\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport \"./css/weather-icons.min.css\";\nimport { connect } from \"react-redux\";\nimport { fetchData } from \"./actions/weatherStation\";\nimport background from \"./image/cloudy.jpg\";\nimport WeatherForecast from \"./components/WeatherForecast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  // Fetches data by using geolocation. If the user blocks, or if the browser does not support the API,\n  // fallsback to default location of London\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      console.log(\"Latitude is :\", position.coords.latitude);\n      console.log(\"Longitude is :\", position.coords.longitude);\n      console.log(\"Position is :\", position);\n    });\n    const detectLocation = new Promise((resolve, reject) => {\n      if (\"geolocation\" in navigator) {\n        const func1 = position => {\n          resolve(position.coords);\n        };\n\n        const func2 = error => {\n          if (error.code === error.PERMISSION_DENIED) {\n            console.error(\"Error detecting location.\");\n          }\n\n          reject(error);\n        };\n\n        navigator.geolocation.getCurrentPosition(func1, func2);\n      }\n    });\n    detectLocation.then(location => {\n      this.props.dispatch(fetchData(location));\n    }).catch(() => {\n      this.props.dispatch(fetchData(\"mumbai\"));\n    });\n  }\n\n  render() {\n    const {\n      forecast\n    } = this.props;\n    return forecast === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      style: {\n        backgroundImage: `url(${background})`\n      },\n      children: /*#__PURE__*/_jsxDEV(WeatherForecast, {\n        data: forecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nexport default connect(store => {\n  return {\n    forecast: store.weatherStation.data\n  };\n}, null)(App);","map":{"version":3,"sources":["C:/Users/91808/Desktop/Weather-app/src/App.js"],"names":["React","Component","connect","fetchData","background","WeatherForecast","App","constructor","props","state","componentDidMount","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","detectLocation","Promise","resolve","reject","func1","func2","error","code","PERMISSION_DENIED","then","location","dispatch","catch","render","forecast","backgroundImage","store","weatherStation","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,6BAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AAEA,OAAOC,eAAP,MAA4B,8BAA5B;;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAC1B;AACA;AACAM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AAED;;AACAC,EAAAA,iBAAiB,GAAG;AACnBC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAASC,QAAT,EAAmB;AAC1DC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,QAAQ,CAACG,MAAT,CAAgBC,QAA7C;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,QAAQ,CAACG,MAAT,CAAgBE,SAA9C;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,QAA7B;AACD,KAJD;AAMA,UAAMM,cAAc,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtD,UAAI,iBAAiBZ,SAArB,EAAgC;AAC9B,cAAMa,KAAK,GAAIV,QAAD,IAAc;AAC1BQ,UAAAA,OAAO,CAACR,QAAQ,CAACG,MAAV,CAAP;AACD,SAFD;;AAGA,cAAMQ,KAAK,GAAIC,KAAD,IAAW;AACvB,cAAIA,KAAK,CAACC,IAAN,KAAeD,KAAK,CAACE,iBAAzB,EAA4C;AAC1Cb,YAAAA,OAAO,CAACW,KAAR,CAAc,2BAAd;AACD;;AACDH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACD,SALD;;AAMAf,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCW,KAAzC,EAAgDC,KAAhD;AACD;AACF,KAbsB,CAAvB;AAeAL,IAAAA,cAAc,CACXS,IADH,CACSC,QAAD,IAAc;AAClB,WAAKtB,KAAL,CAAWuB,QAAX,CAAoB5B,SAAS,CAAC2B,QAAD,CAA7B;AACD,KAHH,EAIGE,KAJH,CAIS,MAAM;AACX,WAAKxB,KAAL,CAAWuB,QAAX,CAAoB5B,SAAS,CAAC,QAAD,CAA7B;AACD,KANH;AAOD;;AAED8B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAK1B,KAA1B;AAEA,WAAO0B,QAAQ,KAAK,IAAb,gBACL;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADK,gBAMJ;AAAK,MAAA,SAAS,EAAC,SAAf;AAAyB,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAG,OAAM/B,UAAW;AAArC,OAAhC;AAAA,6BACC,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAE8B;AAAvB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YANH;AAUD;;AApDyB;;AAuD5B,eAAehC,OAAO,CAAEkC,KAAD,IAAW;AAChC,SAAO;AACLF,IAAAA,QAAQ,EAAEE,KAAK,CAACC,cAAN,CAAqBC;AAD1B,GAAP;AAGD,CAJqB,EAIpB,IAJoB,CAAP,CAIPhC,GAJO,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./css/weather-icons.min.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchData } from \"./actions/weatherStation\";\r\nimport background from \"./image/cloudy.jpg\";\r\n\r\nimport WeatherForecast from \"./components/WeatherForecast\";\r\n\r\nclass App extends Component {\r\n  // Fetches data by using geolocation. If the user blocks, or if the browser does not support the API,\r\n  // fallsback to default location of London\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n   componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(function(position) {\r\n      console.log(\"Latitude is :\", position.coords.latitude);\r\n      console.log(\"Longitude is :\", position.coords.longitude);\r\n      console.log(\"Position is :\", position);\r\n    });\r\n\r\n    const detectLocation = new Promise((resolve, reject) => {\r\n      if (\"geolocation\" in navigator) {\r\n        const func1 = (position) => {\r\n          resolve(position.coords);\r\n        };\r\n        const func2 = (error) => {\r\n          if (error.code === error.PERMISSION_DENIED) {\r\n            console.error(\"Error detecting location.\");\r\n          }\r\n          reject(error);\r\n        };\r\n        navigator.geolocation.getCurrentPosition(func1, func2);\r\n      }\r\n    });\r\n\r\n    detectLocation\r\n      .then((location) => {\r\n        this.props.dispatch(fetchData(location));\r\n      })\r\n      .catch(() => {\r\n        this.props.dispatch(fetchData(\"mumbai\"));\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { forecast } = this.props;\r\n\r\n    return forecast === null ? (\r\n      <div className=\"loading\">\r\n        <div className=\"spinner\"></div>\r\n      </div>\r\n    ) : (\r\n     \r\n       <div className=\"wrapper\" style={{ backgroundImage: `url(${background})`}}>\r\n        <WeatherForecast data={forecast} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((store) => {\r\n  return {\r\n    forecast: store.weatherStation.data,\r\n  };\r\n},null)(App);"]},"metadata":{},"sourceType":"module"}