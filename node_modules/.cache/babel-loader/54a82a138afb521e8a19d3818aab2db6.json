{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91808\\\\Desktop\\\\Weather-app\\\\src\\\\components\\\\ForecastTiles.js\";\nimport React, { Component } from \"react\";\nimport DetailedInfo from \"./DetailedInfo\";\nimport fewCloudsN from \"../icon/few clouds night.png\";\nimport clearDay from \"../icon/clear-day.svg\";\nimport partlyd from \"../icon/partly-cloudy-day.svg\";\nimport clearNight from \"../icon/clear-night.svg\";\nimport cloudy from \"../icon/cloudy.svg\";\nimport fewClouds from \"../icon/few clouds.svg\";\nimport hail from \"../icon/hail.svg\";\nimport partlyn from \"../icon/partly-cloudy-night.svg\";\nimport rain from \"../icon/rain.svg\";\nimport scatteredClouds from \"../icon/scattered clouds.svg\";\nimport scatteredCloudsNight from \"../icon/scattered clouds night.png\";\nimport Sleet from \"../icon/Sleet.svg\";\nimport sleetD from \"../icon/sleet day.png\";\nimport snow from \"../icon/snow.svg\";\nimport thunderstorm from \"../icon/thunderstorm.svg\";\nimport tornado from \"../icon/tornado.svg\";\nimport wind from \"../icon/wind.svg\";\nimport fog from \"../icon/fog.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ForecastTiles extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._groupByDays = data => {\n      return data.reduce((list, item) => {\n        const forecastDate = item.dt_txt.substr(0, 10);\n        list[forecastDate] = list[forecastDate] || [];\n        list[forecastDate].push(item);\n        return list;\n      }, {});\n    };\n\n    this._getDayInfo = data => {\n      const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\n    };\n\n    this._getdes = data => {\n      if (data[0].weather[0].icon === \"01d\") return clearDay;\n      if (data[0].weather[0].icon === \"01n\") return clearNight;\n      if (data[0].weather[0].description === \"cloudy\") return cloudy;\n      if (data[0].weather[0].icon === \"02d\") return fewClouds;\n      if (data[0].weather[0].icon === \"02n\") return fewCloudsN;\n      if (data[0].weather[0].description === \"drizzle rain\") return hail;\n      if (data[0].weather[0].icon === \"04d\") return partlyd;\n      if (data[0].weather[0].icon === \"04n\") return partlyn;\n      if (data[0].weather[0].description === \"rain\") return rain;\n      if (data[0].weather[0].icon === \"03d\") return scatteredClouds;\n      if (data[0].weather[0].icon === \"03n\") return scatteredCloudsNight;\n      if (data[0].weather[0].icon === \"13d\") return sleetD;\n      if (data[0].weather[0].description === \"Sleet\") return Sleet;\n      if (data[0].weather[0].description === \"snow\") return snow;\n      if (data[0].weather[0].description === \"thunderstorm\") return thunderstorm;\n      if (data[0].weather[0].description === \"tornado\") return tornado;\n      if (data[0].weather[0].description === \"sand/ dust whirls\") return wind;\n      if (data[0].weather[0].description === \"fog\") return fog;\n      return clearDay;\n    };\n\n    this.date = data => {\n      var d = data[0].dt_txt;\n      d = d.split(' ')[0];\n      return d;\n    };\n\n    this._getInfo = (data, min = [], max = [], humidity = []) => {\n      data.map(item => {\n        max.push(item.main.temp_max);\n        min.push(item.main.temp_min);\n        humidity.push(item.main.humidity);\n      });\n      const minMax = {\n        min: Math.round(Math.min(...min)),\n        max: Math.round(Math.max(...max))\n      }; // Gets the day's average humdity\n\n      const avgHumdity = Math.round(humidity.reduce((curr, next) => curr + next) / humidity.length);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"min-max\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: `Max temp: ${minMax.max}°C`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 11\n          }, this), \" /\", \" \", `Min temp: ${minMax.min}°C`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"more-info\",\n          children: [`Avg. Humidity: ${avgHumdity}%`, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: `wind speed: ${Math.round(data[0].wind.speed * 3.6)}km/h`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this);\n    };\n\n    this._showMoreInfo = index => {\n      const elm = this.refs[`div-${index}`];\n      const expandedElment = document.querySelector(\".expanded\");\n      elm.classList.add(\"expanded\");\n      expandedElment !== null && expandedElment.classList.remove(\"expanded\");\n    };\n  }\n\n  render() {\n    const {\n      forecasts\n    } = this.props;\n    const tiles = Object.values(this._groupByDays(forecasts)); // Edge case:\n    // When the webservice returns data for 6 calendar days during evenings as a result of offset,\n    // this ensures that we are showing only 5-days of forecast.\n\n    const forecastTiles = tiles.length > 5 ? tiles.slice(0, 5) : tiles;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-tiles\",\n      children: forecastTiles.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `forecast-tile tile-${i}`,\n        ref: `div-${i}`,\n        onClick: () => {\n          this._showMoreInfo(i);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"primary-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"icon\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"img\",\n              src: this._getdes(item)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), this._getDayInfo(item), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"Date\",\n              children: this.date(item)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), this._getInfo(item)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"detailed-info\",\n          children: /*#__PURE__*/_jsxDEV(DetailedInfo, {\n            data: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n\n} // TODO: Add defaultProps and PropType validations","map":{"version":3,"sources":["C:/Users/91808/Desktop/Weather-app/src/components/ForecastTiles.js"],"names":["React","Component","DetailedInfo","fewCloudsN","scatteredCloudsNight","sleetD","ForecastTiles","_groupByDays","data","reduce","list","item","forecastDate","dt_txt","substr","push","_getDayInfo","daysOfWeek","Date","dt","getDay","_getdes","weather","icon","clearDay","clearNight","description","cloudy","fewClouds","hail","partlyd","partlyn","rain","scatteredClouds","Sleet","snow","thunderstorm","tornado","wind","fog","date","d","split","_getInfo","min","max","humidity","map","main","temp_max","temp_min","minMax","Math","round","avgHumdity","curr","next","length","speed","_showMoreInfo","index","elm","refs","expandedElment","document","querySelector","classList","add","remove","render","forecasts","props","tiles","Object","values","forecastTiles","slice","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport DetailedInfo from \"./DetailedInfo\";\r\n\r\nimport fewCloudsN from \"../icon/few clouds night.png\";\r\nimport clearDay from \"../icon/clear-day.svg\";\r\nimport partlyd from \"../icon/partly-cloudy-day.svg\";\r\nimport clearNight from \"../icon/clear-night.svg\";\r\nimport cloudy from \"../icon/cloudy.svg\";\r\nimport fewClouds from \"../icon/few clouds.svg\";\r\nimport hail from \"../icon/hail.svg\";\r\nimport partlyn from \"../icon/partly-cloudy-night.svg\";\r\nimport rain from \"../icon/rain.svg\";\r\nimport scatteredClouds from \"../icon/scattered clouds.svg\";\r\nimport scatteredCloudsNight from \"../icon/scattered clouds night.png\";\r\nimport Sleet from \"../icon/Sleet.svg\";\r\nimport sleetD from \"../icon/sleet day.png\";\r\nimport snow from \"../icon/snow.svg\";\r\nimport thunderstorm from \"../icon/thunderstorm.svg\";\r\nimport tornado from \"../icon/tornado.svg\";\r\nimport wind from \"../icon/wind.svg\";\r\nimport fog from \"../icon/fog.svg\";\r\n\r\n\r\nexport default class ForecastTiles extends Component {\r\n \r\n   \r\n  // Filters the data by date and returns an Object containing a list of 5-day forecast.\r\n  _groupByDays = (data) => {\r\n    return data.reduce((list, item) => {\r\n      const forecastDate = item.dt_txt.substr(0, 10);\r\n      list[forecastDate] = list[forecastDate] || [];\r\n      list[forecastDate].push(item);\r\n      return list;\r\n    }, {});\r\n  };\r\n\r\n  // Returns week of the day\r\n  _getDayInfo = (data) => {\r\n    const daysOfWeek = [\r\n      \"sunday\",\r\n      \"monday\",\r\n      \"tuesday\",\r\n      \"wednesday\",\r\n      \"thursday\",\r\n      \"friday\",\r\n      \"saturday\",\r\n    ];\r\n    return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\r\n  };\r\n  \r\n \r\n  // Fetches the icon using the icon code available in the forecast data.\r\n\r\n _getdes = data => {\r\n   \r\n    if(data[0].weather[0].icon  === \"01d\") return clearDay;\r\n    if(data[0].weather[0].icon  === \"01n\") return clearNight;\r\n    if(data[0].weather[0].description  === \"cloudy\") return cloudy;\r\n    if(data[0].weather[0].icon  === \"02d\") return fewClouds;\r\n    if(data[0].weather[0].icon  === \"02n\") return fewCloudsN;\r\n    if(data[0].weather[0].description  === \"drizzle rain\") return hail;\r\n    if(data[0].weather[0].icon  === \"04d\") return partlyd;\r\n    if(data[0].weather[0].icon  === \"04n\") return partlyn;\r\n    if(data[0].weather[0].description  === \"rain\") return rain;\r\n    if(data[0].weather[0].icon  === \"03d\") return scatteredClouds;\r\n    if(data[0].weather[0].icon  === \"03n\") return scatteredCloudsNight;\r\n    if(data[0].weather[0].icon  === \"13d\") return sleetD;\r\n    if(data[0].weather[0].description  === \"Sleet\") return Sleet;\r\n    if(data[0].weather[0].description  === \"snow\") return snow;\r\n    if(data[0].weather[0].description  === \"thunderstorm\") return thunderstorm;\r\n    if(data[0].weather[0].description  === \"tornado\") return tornado;\r\n    if(data[0].weather[0].description  === \"sand/ dust whirls\") return wind;\r\n    if(data[0].weather[0].description  === \"fog\") return fog;\r\n    return clearDay;\r\n    \r\n   }  \r\n    // console.log(data[0].weather[0].description);\r\n   \r\n\r\n  // const url='./icon/console.log'\r\n \r\n  // console.log(data[0].wind.speed);\r\ndate = data => {\r\n  \r\n   var d = data[0].dt_txt;\r\n   d = d.split(' ')[0];\r\n   return d;\r\n   \r\n}\r\n\r\n\r\n  // Gets the Minimum, Maximum and Avg Humidity temperatures of the day.\r\n  _getInfo = (data, min = [], max = [], humidity = []) => {\r\n    data.map((item) => {\r\n      max.push(item.main.temp_max);\r\n      min.push(item.main.temp_min);\r\n      humidity.push(item.main.humidity);\r\n     \r\n    });\r\n\r\n    const minMax = {\r\n      min: Math.round(Math.min(...min)),\r\n      max: Math.round(Math.max(...max)),\r\n    };\r\n\r\n    // Gets the day's average humdity\r\n    const avgHumdity = Math.round(\r\n      humidity.reduce((curr, next) => curr + next) / humidity.length\r\n    );\r\n\r\n    return (\r\n     \r\n      <div className=\"weather-info\">\r\n        <div className=\"min-max\">\r\n          <strong>{`Max temp: ${minMax.max}°C`}</strong> /{\" \"}\r\n          {`Min temp: ${minMax.min}°C`}\r\n        </div>\r\n        <div className=\"more-info\">{`Avg. Humidity: ${avgHumdity}%`}\r\n        <div>{`wind speed: ${Math.round(data[0].wind.speed*3.6)}km/h`}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Toggles accordion to display hourly weather information\r\n  _showMoreInfo = (index) => {\r\n    const elm = this.refs[`div-${index}`];\r\n    const expandedElment = document.querySelector(\".expanded\");\r\n\r\n    elm.classList.add(\"expanded\");\r\n    expandedElment !== null && expandedElment.classList.remove(\"expanded\");\r\n  };\r\n\r\n  render() {\r\n    const { forecasts } = this.props;\r\n    const tiles = Object.values(this._groupByDays(forecasts));\r\n    \r\n    // Edge case:\r\n    // When the webservice returns data for 6 calendar days during evenings as a result of offset,\r\n    // this ensures that we are showing only 5-days of forecast.\r\n    const forecastTiles = tiles.length > 5 ? tiles.slice(0, 5) : tiles;\r\n    return (\r\n      <div className=\"forecast-tiles\">\r\n       \r\n        {forecastTiles.map((item, i) => (\r\n          <div\r\n            className={`forecast-tile tile-${i}`}\r\n            key={i}\r\n            ref={`div-${i}`}\r\n            onClick={() => {\r\n              this._showMoreInfo(i);\r\n            }}\r\n          >\r\n            <div className=\"primary-info\">\r\n              <div className=\"icon\">\r\n                <img className=\"img\" src={this._getdes(item)} />\r\n                {this._getDayInfo(item)}\r\n                <p className=\"Date\">{this.date(item)}</p>\r\n              </div>\r\n              {this._getInfo(item)}\r\n            </div>\r\n            <div className=\"detailed-info\" key={i}>\r\n              <DetailedInfo data={item} />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// TODO: Add defaultProps and PropType validations\r\n"]},"metadata":{},"sourceType":"module"}